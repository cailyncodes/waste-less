{"code":"import 'phaser';\r\nimport { cartesianProduct } from './lib/cartesian-product';\r\nimport { shuffle } from './lib/shuffle';\r\nconst KEYS = {\r\n    BIN: 'bin',\r\n    FIELD: 'field',\r\n    NAME: 'waste-less',\r\n    PLAYER: 'player',\r\n    WASTE: 'waste',\r\n};\r\nexport default class WasteLess extends Phaser.Scene {\r\n    constructor() {\r\n        super(KEYS.NAME);\r\n        this.collectWaste = (player, waste) => {\r\n            const storedWaste = player.getData('waste') || [];\r\n            if (storedWaste.length === 3) {\r\n                return;\r\n            }\r\n            const currentWaste = [...storedWaste, waste];\r\n            player.setData({\r\n                waste: currentWaste\r\n            });\r\n            this.bottomText.setText(`${currentWaste.length}/3 waste stored`);\r\n            this.wastes.remove(waste, true, true);\r\n        };\r\n        this.depositWaste = (player, bin) => {\r\n            const storedWaste = player.getData('waste') || [];\r\n            const lastBin = player.getData('lastBin');\r\n            const [, ...remainingWaste] = storedWaste;\r\n            if (lastBin !== bin) {\r\n                this.player.setData({\r\n                    waste: remainingWaste,\r\n                    lastBin: bin,\r\n                });\r\n                this.bottomText.setText(`${remainingWaste.length}/3 waste stored`);\r\n            }\r\n            if (storedWaste.length > 0) {\r\n                this.topText.setText(\"You can only drop off one waste at a time. Go to another bin.\");\r\n            }\r\n            else {\r\n                this.topText.setText('');\r\n            }\r\n            this.checkWin();\r\n        };\r\n    }\r\n    preload() {\r\n        this.load.spritesheet(KEYS.PLAYER, 'assets/dude.png', { frameWidth: 32, frameHeight: 48 });\r\n        this.load.image(KEYS.BIN, 'assets/bin.png');\r\n        this.load.image(KEYS.WASTE, 'assets/star.png');\r\n    }\r\n    create() {\r\n        const x = shuffle(Array.from(Array(7).keys()));\r\n        const y = shuffle(Array.from(Array(5).keys()));\r\n        const positions = shuffle(shuffle(cartesianProduct(x, y)));\r\n        this.addBins(positions);\r\n        this.addWastes(positions);\r\n        this.player = this.physics.add.sprite(positions[0][0], positions[0][1], KEYS.PLAYER);\r\n        this.player.setCollideWorldBounds(true);\r\n        this.physics.add.collider(this.wastes, this.player, this.collectWaste);\r\n        this.physics.add.collider(this.bins, this.player, this.depositWaste);\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers(KEYS.PLAYER, { start: 0, end: 3 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'turn',\r\n            frames: [{ key: KEYS.PLAYER, frame: 4 }],\r\n            frameRate: 20\r\n        });\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers(KEYS.PLAYER, { start: 5, end: 8 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.topText = this.add.text(0, 0, '').setBackgroundColor('black');\r\n        this.middleText = this.add.text(0, 280, '', { fontSize: '25px' }).setBackgroundColor('black');\r\n        this.bottomText = this.add.text(0, 580, '');\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n    }\r\n    update() {\r\n        let isMoving = false;\r\n        if (this.cursors.up.isDown || this.cursors.down.isDown) {\r\n            isMoving = true;\r\n            if (this.cursors.up.isDown) {\r\n                this.player.setVelocityY(-160);\r\n            }\r\n            else {\r\n                this.player.setVelocityY(160);\r\n            }\r\n            this.player.anims.play('turn');\r\n        }\r\n        else {\r\n            this.player.setVelocityY(0);\r\n        }\r\n        if (this.cursors.left.isDown || this.cursors.right.isDown) {\r\n            isMoving = true;\r\n            if (this.cursors.left.isDown) {\r\n                this.player.setVelocityX(-160);\r\n                this.player.anims.play('left', true);\r\n            }\r\n            else {\r\n                this.player.setVelocityX(160);\r\n                this.player.anims.play('right', true);\r\n                isMoving = true;\r\n            }\r\n        }\r\n        else {\r\n            this.player.setVelocityX(0);\r\n        }\r\n        if (!isMoving) {\r\n            this.player.setVelocityX(0);\r\n            this.player.setVelocityY(0);\r\n            this.player.anims.play('turn');\r\n        }\r\n        const playerCollectedWaste = this.player.getData('waste') || [];\r\n        if (playerCollectedWaste.length === 3) {\r\n            this.topText.setText(\"Your hands are full! Drop off waste in your bin.\");\r\n        }\r\n    }\r\n    static randomPosition(dimension) {\r\n        return Math.random() * dimension;\r\n    }\r\n    clashes(x, y, width, height, ...objs) {\r\n        return objs.reduce((clashes, obj) => clashes || this.physics.overlapRect(x, y, width, height).includes(obj), false);\r\n    }\r\n    addBins(positions) {\r\n        this.bins = this.physics.add.staticGroup({\r\n            frameQuantity: 5,\r\n        });\r\n        for (let _ = 0; _ < 5; ++_) {\r\n            const jiggle = (Math.random() < 0.5 ? -1 : 1) * Math.random() * 25;\r\n            const position = positions.shift();\r\n            const bin = this.physics.add.staticImage(position[0] * 100 + 50 + jiggle, position[1] * 100 + 50 + jiggle, KEYS.BIN);\r\n            // this.bins.create(positions[_][0] * 100 + 50, positions[_][1] * 100 + 50, KEYS.BIN);\r\n            bin.scale = 0.3;\r\n            bin.setSize(16, 16);\r\n            this.bins.add(bin);\r\n        }\r\n        this.bins.refresh();\r\n    }\r\n    addWastes(positions) {\r\n        this.wastes = this.physics.add.staticGroup({\r\n            frameQuantity: 15,\r\n        });\r\n        for (let _ = 0; _ < 0; ++_) {\r\n            const jiggle = (Math.random() < 0.5 ? -1 : 1) * Math.random() * 50;\r\n            const position = positions.shift();\r\n            const waste = this.physics.add.staticImage(position[0] * 100 + 50 + jiggle, position[1] * 100 + 50 + jiggle, KEYS.WASTE);\r\n            waste.setSize(16, 16);\r\n            this.wastes.add(waste);\r\n        }\r\n        this.wastes.refresh();\r\n    }\r\n    checkWin() {\r\n        const storedWaste = this.player.getData('waste') || [];\r\n        const remainingWaste = this.wastes;\r\n        const didWin = storedWaste.length + remainingWaste.getLength() === 0;\r\n        if (didWin) {\r\n            this.topText.setText('');\r\n            this.middleText.setText([\"You saved all the waste from the landfill!\", \"Thank you for wasting less!\"]);\r\n            this.bottomText.setText('');\r\n        }\r\n    }\r\n}\r\n","references":["/usr/src/app/node_modules/phaser/types/phaser.d.ts","/usr/src/app/src/config.ts","/usr/src/app/src/lib/cartesian-product.ts","/usr/src/app/src/lib/shuffle.ts"]}
